{"version":3,"sources":["ConnectWallet.jsx","CollectUsername.jsx","DIDToGist.jsx","Home.jsx","App.js","reportWebVitals.js","index.js","Reducer.js","CreateCredential.jsx"],"names":["connect","state","address","did","setCeramic","useState","web3","setWeb3","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","console","info","getInjectedProvider","disconnect","a","setDID","setAddress","clearCachedProvider","currentProvider","provider","Web3","eth","getAccounts","addresses","threeID","ThreeIdConnect","EthereumAuthProvider","ceramic","Ceramic","setDIDProvider","getDidProvider","id","error","enableIfInjected","cachedProvider","useEffect","align","title","slice","Delete","onClick","username","name","setName","setUsername","target","href","as","onSubmit","evt","preventDefault","textAlign","value","onChange","pasted","failed","onCopy","useClipboard","toast","useToast","Copy","status","duration","isClosable","setPasted","setFailed","background","comps","push","key","CreateCredential","theme","bg","style","border","textIndent","padding","maxW","margin","textDecoration","spacing","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","pageSlice","createSlice","initialState","reducers","nextPage","step","lastPage","action","payload","configureStore","reducer","addr","dispatch","actions","user","verifier","idxKey","deB64","str","de","Buffer","from","toString","JSON","parse","err","jwtStr","obj","signatures","protected","signature","join","done","setDone","setError","create","url","stringify","fetch","method","body","res","json","datum","challengeCode","data","Error","createJWS","jws","message","att","attestation","parts","split","map","acct","vc","credentialSubject","account","protocol","host","claim","attestations","idx","IDX","aliases","definitions","get","accounts","aka","merge","toUrl"],"mappings":"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","file":"static/js/main.8131ce68.chunk.js","sourcesContent":["import { useState } from 'react'\nimport Web3 from 'web3'\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\nimport { connect } from 'react-redux'\nimport {\n  Box, Button, Spinner, Stack, Text\n} from '@chakra-ui/react'\nimport { DeleteIcon } from '@chakra-ui/icons'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { getInjectedProvider } from 'web3modal'\nimport { useEffect } from 'react'\nimport { setAddress, setDID } from './Reducer'\n\n// Δυς's dev key; not to be relied upon\nconst infuraId = '24eb2385c3514f3d98191ad5e4c903e7'\nconst ceramicSvr = 'https://ceramic-clay.3boxlabs.com'\n\nconst ConnectWallet = ({ address, setCeramic, did }) => {\n  const [web3, setWeb3] = useState()\n\n  const providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId // required\n      }\n    }\n  }\n  const web3Modal = new Web3Modal({\n    cacheProvider: true, // optional\n    // network: 'xdai', // optional\n    providerOptions, // required\n  })\n\n  console.info(getInjectedProvider())\n\n  const disconnect = async () => {\n    setDID()\n    setAddress()\n    web3Modal.clearCachedProvider()\n    if(web3?.currentProvider?.disconnect) {\n      await web3.currentProvider.disconnect()\n    }\n  }\n\n  const connect = async () => {\n    try {\n      const provider = await web3Modal.connect()\n      const web3 = new Web3(provider)\n      setWeb3(web3)\n\n      const addresses = await web3.eth.getAccounts()\n      const address = addresses[0]\n      setAddress(address)\n\n      const threeID = new ThreeIdConnect()\n      await threeID.connect(\n        new EthereumAuthProvider(provider, address)\n      )\n\n      const ceramic = new Ceramic(ceramicSvr)\n      await ceramic.setDIDProvider(threeID.getDidProvider())\n      setCeramic(ceramic)\n\n      setDID(ceramic.did.id)\n      } catch(err) {\n        console.error(err)\n        disconnect()\n      }\n  }\n\n  const enableIfInjected = async () => {\n    if(!did && web3Modal.cachedProvider === 'injected') {\n      await connect()\n    }\n  }\n\n  useEffect(() => enableIfInjected(), [])\n\n  if(address) {\n    return (\n      <Stack align='center'>\n        <Text>\n          Using:\n          <span> </span>\n          <span title={address}>\n            {address.slice(0, 10)}…{address.slice(-5)}\n          </span>\n          <span> </span>\n          <DeleteIcon onClick={disconnect}/>\n        </Text>\n        {!did && <Spinner/>}\n      </Stack>\n    )\n  }\n\n  return (\n    <Box align='center'>\n      <Button onClick={connect}>Connect Your Wallet</Button>\n    </Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    address: state.address,\n    did: state.did,\n  }),\n)(ConnectWallet)","import { useState } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Box, Text, Input, Center, Stack, Link\n} from '@chakra-ui/react'\nimport { DeleteIcon } from '@chakra-ui/icons'\nimport { setUsername } from './Reducer'\n\nconst CollectUsername = ({ username }) => {\n  const [name, setName] = useState(username || '')\n\n  if(username) {\n    return (\n      <Box><Center>\n        <Text>\n          Checking: {username}\n          <span> </span>\n          <DeleteIcon onClick={() => setUsername()}/>\n        </Text>\n      </Center></Box>\n    )\n  }\n\n  const onSubmit = (evt) => {\n    evt.preventDefault()\n    setUsername(name)\n  }\n\n  return (\n    <Box><Stack align='center'>\n      <Text>\n        ¿What's your\n        <span> </span>\n        <Link target='_blank' href='//github.com'>Github</Link>\n        <span> </span>\n        username?\n      </Text>\n      <Box as='form' onSubmit={onSubmit}>\n        <Input\n          textAlign='center'\n          value={name}\n          onChange={(evt) => setName(evt.target.value)}\n        />\n      </Box>\n    </Stack></Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    username: state.username,\n  })\n)(CollectUsername)","import { connect } from \"react-redux\"\nimport {\n  Box, useClipboard, Text, Stack, Button, useToast, Link\n} from '@chakra-ui/react'\nimport { CopyIcon } from '@chakra-ui/icons'\nimport { setFailed, setPasted } from './Reducer'\n\nconst DIDToGist = ({ did, username, pasted, failed }) => {\n  const { onCopy } = useClipboard(did)\n  const toast = useToast()\n  return (\n    <Box><Stack align='center'>\n      <Text>\n        Copy your DID to a\n        <span> </span>\n        <Link\n          target='_blank'\n          href={`//gist.github.com/${username}`}\n        >\n          gist\n        </Link>.\n      </Text>\n      <Text>\n        <span title={did}>\n          {did.slice(0, 10)}…{did.slice(-5)}\n        </span>\n        <span> </span>\n        <CopyIcon title=\"copy\" onClick={() => {\n          onCopy()\n          toast({\n            title: 'Copied',\n            status: 'success',\n            duration: 2000,\n            isClosable: true,\n          })\n        }}/>\n      </Text>\n      {(!pasted || failed) &&\n        <Button onClick={() => {\n          setPasted(true)\n          setFailed(false)\n        }}\n        background='green.100'\n        >\n          ✔ Gist Created\n        </Button>}\n    </Stack></Box>\n  )\n}\n\nexport default connect(\n  (state) => {\n    const { did, username, pasted, failed } = state\n    return {\n      did, username, pasted, failed,\n    }\n  }\n)(DIDToGist)","import { connect } from 'react-redux'\nimport { useState } from 'react'\nimport ConnectWallet from './ConnectWallet'\nimport CollectUsername from './CollectUsername'\nimport DIDToGist from './DIDToGist'\nimport CreateCredential from './CreateCredential'\nimport { Stack } from '@chakra-ui/react'\nimport { theme, ThemeProvider, CSSReset, Box, Text, Link } from \"@chakra-ui/react\";\n\nconst Home = ({ address, username, did, pasted }) => {\n  const [ceramic, setCeramic] = useState()\n  const comps = []\n  comps.push(<ConnectWallet {...{ setCeramic }} key={1}/>)\n  if(did) {\n    comps.push(<CollectUsername key={2}/>)\n    if(username) {\n      comps.push(<DIDToGist key={3}/>)\n      if(pasted) {\n        comps.push(<CreateCredential {...{ ceramic }} key={4}/>)\n      }\n    }\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <Box\n        bg=\"#FF000033\" style={{\n          border: '2px soild #F00',\n          textIndent: 15,\n        }}\n        padding=\"1rem\"\n        maxW=\"30rem\" margin=\"2rem auto\"\n      >\n        <Text>This site is no longer functional. The serverless functions which checks to see that the Gist has been created is no longer running.</Text>\n        <Text>The <Link textDecoration=\"underline\" href='//self.id'>self.id</Link> project is the official Ceramic interface to create account links.</Text>\n      </Box>\n      <Stack align='center' spacing={5}>{comps}</Stack>\n    </ThemeProvider>\n  )\n}\n\nexport default connect(state => {\n  const { address, username, did, pasted } = state\n  return { address, username, did, pasted }\n})(Home)","import { Provider } from 'react-redux'\nimport Home from './Home'\nimport { store } from './Reducer'\n\nexport default () => (\n  <Provider store={store}>\n    <Home/>\n  </Provider>\n)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst initial = {\n  pasted: false,\n  failed: false,\n}\n\nconst pageSlice = createSlice({\n  name: 'page',\n  initialState: initial,\n  reducers: {\n    nextPage: state => ({ ...state, step: state.step + 1 }),\n    lastPage: state => ({ ...state, step: state.step + 1 }),\n    setAddress: (state, action) => (\n      { ...state, address: action.payload }\n    ),\n    setUsername: (state, action) => (\n      { ...state, username: action.payload }\n    ),\n    setDID: (state, action) => (\n      { ...state, did: action.payload }\n    ),\n    setPasted: (state, action) => (\n      { ...state, pasted: action.payload }\n    ),\n    setFailed: (state, action) => (\n      { ...state, failed: action.payload }\n    ),\n  },\n})\n\nexport const store = configureStore({\n  reducer: pageSlice.reducer\n})\n\nexport const next = () => (\n  store.dispatch(pageSlice.actions.nextPage())\n)\nexport const previous = () => (\n  store.dispatch(pageSlice.actions.previousPage())\n)\nexport const setAddress = (addr) => (\n  store.dispatch(pageSlice.actions.setAddress(addr))\n)\nexport const setUsername = (user) => (\n  store.dispatch(pageSlice.actions.setUsername(user))\n)\nexport const setDID = (did) => (\n  store.dispatch(pageSlice.actions.setDID(did))\n)\nexport const setPasted = (pasted) => (\n  store.dispatch(pageSlice.actions.setPasted(pasted))\n)\nexport const setFailed = (failed) => (\n  store.dispatch(pageSlice.actions.setFailed(failed))\n)","import { useState, useEffect } from 'react'\nimport { connect } from \"react-redux\"\nimport {\n  Box, Spinner, Text, Alert, AlertDescription, AlertIcon\n} from '@chakra-ui/react'\nimport { IDX } from '@ceramicstudio/idx'\nimport { definitions } from './docIDs.json'\nimport { setFailed } from './Reducer'\n\n//const verifier = 'http://localhost:3000'\nconst verifier = 'https://oiekhuylog.execute-api.us-west-2.amazonaws.com/develop'\nconst idxKey = 'aka'\n\n// Reverse base 64 encoding to an object if possible\nconst deB64 = (str) => {\n  const de = Buffer.from(str, 'base64').toString()\n  try {\n    return JSON.parse(de)\n  } catch(err) {\n    return de\n  } \n}\n\n// Convert the object representation of a JWT to a string\nconst jwtStr = (obj) => (\n  [\n    obj.signatures[0].protected,\n    obj.payload,\n    obj.signatures[0].signature,\n  ]\n  .join('.')\n)\n\nconst CreateCredential = ({ did, username, failed, ceramic }) => {\n  const [done, setDone] = useState(false)\n  const [error, setError] = useState()\n  const create = async () => {\n    try {\n      let url = `${verifier}/api/v0/request-github`\n      console.info(JSON.stringify(\n        { did, username }\n      ))\n      let res = await fetch(url, {\n        method: 'post',\n        body: JSON.stringify(\n          { did, username }\n        ),\n      })\n      let datum = await res.json()\n      const challengeCode = datum?.data?.challengeCode\n\n      if(!challengeCode) throw new Error(\"Couldn't generate challenge\")\n      \n      const jws = jwtStr(\n        await ceramic.did.createJWS({ challengeCode })\n      )\n\n      //console.info('Valid:', await ceramic.did.verifyJWS(jws))\n\n      url = `${verifier}/api/v0/confirm-github`\n      res = await fetch(url, {\n        method: 'post',\n        body: JSON.stringify({ jws }),\n      })\n\n      datum = await res.json()\n      if(datum.status === 'error') throw new Error(datum.message)\n      if(datum.status >= 300) throw new Error(datum.body)\n      const att = datum?.data?.attestation\n      if(!att) throw new Error('missing attestation')\n      const parts = att?.split('.').map(deB64)\n      console.info(parts)\n      const acct = parts[1].vc.credentialSubject.account\n\n      const account = {\n        protocol: 'https',\n        host: 'github.com',\n        id: acct.username,\n        claim: acct.url,\n        attestations: [{ 'did-jwt-vc': att }]\n      }\n\n      const idx = new IDX({ ceramic, aliases: definitions })\n\n      const aka = (await idx.get(idxKey)) ?? { accounts: [] }\n\n      console.info('existing', { ...aka })\n\n      if(!aka.accounts) throw new Error(`malformed ${idxKey} entry`)\n      aka.accounts.push(account)\n\n      console.info('new', { ...aka })\n\n      console.info('repo', (await idx.merge(idxKey, aka)).toUrl())\n      setDone(true)\n    } catch(err) {\n      console.error(err)\n      setError(err.message)\n      setFailed(true)\n    }\n  }\n\n  useEffect(() => {\n    if(!failed) {\n      setError()\n      create()\n    }\n  }, [failed])\n\n  if(error) {\n    return (\n      <Box><Alert status=\"error\">\n        <AlertIcon />\n        <AlertDescription>{error}</AlertDescription>\n      </Alert></Box>\n    )\n  }\n\n  if(!done) {\n    return (\n      <Box align='center'>\n        <Text>Verifying gist for {username}.</Text>\n        <span> </span>\n        <Spinner/>\n      </Box>\n    )\n  }\n\n  return (\n    <Box align='center'><Text>Verified</Text></Box>\n  )\n}\n\nexport default connect(\n  (state) => {\n    const { did, username, failed } = state\n    return {\n      did, username, failed,\n    }\n  }\n)(CreateCredential)"],"sourceRoot":""}